Ecrire le programme qui vérifie que les sommes de chaque ligne, chaque colonne et des deux diagonales d’un tableau numérique carré sont les mêmes.

    VAR LOCALES
    L :N <- x               //var qui stocke le nombre de lignes
    C :N <- y               //var qui stocke le nombre de colonnes
    T :N <- [L, C]          //var qui donne corps au tableau, en fonction du nombre de lignes et de colonnes défini
    COMPARL :N <- 0
    COMPARC :N <- 0
    COMPARD :N <- 0         //var qui vont  permettre de comparer si les différentes sommes sont égales les unes aux autres
    SUML :N <- 0            //var qui va faire la somme de chaque ligne
    SUMC :N <- 0            //var qui va faire la somme de chaque colonne
    SUMD :N <- 0            //var qui va faire la somme de chaque diagonale
    FIN VAR LOC

// Note générale : ce programme va fonctionner avec trois paires de boucles imbriquées correspondant aux trois types de somme que l'on cherche à calculer; à tour de rôle, elles vont calculer les sommes pour chaque occurrence (chaque 
// ligne, chaque colonne, chaque diagonale) pour un même type d'élément de colonne; si ces sommes sont bien égales l'une à l'autre, alors la somme est stockée dans la variable COMPAR; ensuite, on passe au type suivant. Si à un moment donné il y a une inégalité qui est rencontrée, le programme s'arrête et affiche un message de circonstance. Note : on a besoin, pour des raisons de comparaison, d'initier les  valeurs SUML, SUMC et SUMD à la somme de la première ligne, colonne ou diagonale.

// Définition de SUML

    POUR i ALLANT DE 1 A C
        SUML <- SUML + T[i, 1]
        i suivant
    COMPARL <- SUML


// Boucle 1 : les sommes de tous les lignes sont-elles égales ?

// tant que + booléen

    POUR i ALLANT DE 2 A L
        POUR  j ALLANT DE 1 A C
            SUML <- SUML + T[i, j]
            j SUIVANT
        SI COMPARL = SUML
        

etc
